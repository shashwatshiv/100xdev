/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
app.use(bodyParser.json());

let todoArray = [];
//GET ALL
app.get("/todos", (req, res) => {
  res.json(todoArray);
});
// GET BY ID
app.get("/todos/:id", (req, res) => {
  let urlId = req.url.split("/")[2];
  let noteFound = false;
  todoArray.forEach((element) => {
    if (urlId == element.id) {
      res.send(element);
      noteFound = true;
    }
  });
  if (noteFound == false) res.sendStatus(404);
});
//POST
app.post("/todos", (req, res) => {
  let newTodo = req.body;
  let id = Math.floor(Math.random() * 100);
  Object.assign(newTodo, { id: id });
  todoArray.push(newTodo);
  res.status(201).json({ id: id });
});
// PUT
app.put("/todos/:id", (req, res) => {
  let urlId = req.url.split("/")[2];
  let updatedTodo = {};
  let update = false;
  updatedTodo = req.body;
  todoArray.forEach((element, index) => {
    if (urlId == element.id) {
      element.title = updatedTodo.title;
      element.description = updatedTodo.description;
      update = true;
      res.sendStatus(200);
    }
  });
  if (update == false) {
    res.sendStatus(404);
  }
});
// DELETE
app.delete("/todos/:id", (req, res) => {
  let urlId = req.url.split("/")[2];
  let deleted = false;
  todoArray.forEach((element, index) => {
    if (urlId == element.id) {
      todoArray.splice(index, 1);
      res.sendStatus(200);
      deleted = true;
    }
  });
  if (deleted == false) {
    res.sendStatus(404);
  }
});
module.exports = app;
